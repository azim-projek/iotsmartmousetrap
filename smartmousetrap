#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ESP32Servo.h>

// ====== WiFi & Telegram Settings ======
const char* WIFI_SSID = "realme GT NEO 3";
const char* WIFI_PASS = "miskinsangatke";
const char* BOT_TOKEN = "8498667402:AAFNyYRi8Nost92KMfCfaI4y4AhYm4jccNE";
const char* CHAT_ID = "1034103142";

// ====== Ultrasonic Pins ======
#define TRIG_PIN 5
#define ECHO_PIN 18

// ====== Servo Pins ======
#define SERVO_LEFT 13
#define SERVO_RIGHT 12

// ====== Variables ======
long duration;
float distance;
float threshold = 10.0; // cm
bool doorOpen = false;

// ====== Objects ======
Servo servoLeft;
Servo servoRight;
WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);

// ====== Function Prototypes ======
void openDoors();
void closeDoors();
float getDistance();

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("\n=== ESP32 Ultrasonic Door System ===");

  // === Servo Setup ===
  servoLeft.attach(SERVO_LEFT);
  servoRight.attach(SERVO_RIGHT);
  delay(500);
  closeDoors(); // Start closed

  // === Ultrasonic Setup ===
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // === WiFi Setup ===
  Serial.println("Connecting to WiFi...");
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  client.setInsecure();

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nâœ… WiFi Connected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  bot.sendMessage(CHAT_ID, "ðŸš€ ESP32 Door System is Online", "");
}

void loop() {
  distance = getDistance();

  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  if (distance > 2 && distance < threshold && !doorOpen) {
    doorOpen = true;
    openDoors();
    bot.sendMessage(CHAT_ID, "ðŸšª Object Detected! Doors Opening...", "");
    delay(3000);
    closeDoors();
    bot.sendMessage(CHAT_ID, "âœ… Doors Closed", "");
    doorOpen = false;
  }

  delay(500);
}

// ====== Function: Get Distance ======
float getDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  duration = pulseIn(ECHO_PIN, HIGH, 25000);
  if (duration == 0) return 999;
  return (duration * 0.034 / 2);
}

// ====== Function: Open Doors (180Â° range) ======
void openDoors() {
  Serial.println("Opening doors (180Â°)...");
  for (int pos = 0; pos <= 180; pos++) {
    servoLeft.write(pos);
    servoRight.write(180 - pos);
   

  }
  Serial.println("Doors opened!");
}

// ====== Function: Close Doors (180Â° range) ======
void closeDoors() {
  Serial.println("Closing doors (180Â°)...");
  for (int pos = 180; pos >= 0; pos--) {
    servoLeft.write(pos);
    servoRight.write(180 - pos);
   
  }
  Serial.println("Doors closed!");
}
